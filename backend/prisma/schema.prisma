generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  HOST
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id                     Int       @id @default(autoincrement())
  name                   String    @db.VarChar(50)
  email                  String    @unique
  password               String    @db.VarChar(100)
  avatar                 String    @default("https://res.cloudinary.com/dtaawt3ej/image/upload/v1747292486/q9lmgugyqgrm7q5voatw.jpg")
  age                    Int?
  gender                 Gender?
  dob                    DateTime? @db.Date
  address                String?
  role                   UserRole  @default(USER)
  phone                  String?
  isVerified             Boolean   @default(false)
  resetOtp               String?
  resetOtpExpires        DateTime?
  verificationOtp        String?
  verificationOtpExpires DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  Listing  Listing[]
  Booking  Booking[]
  Wishlist Wishlist[]
  Review   Review[]
  Report   Report[]

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Wishlist {
  id        Int @id @default(autoincrement())
  userId    Int
  listingId Int

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, listingId])
}

model Listing {
  id            Int            @id @default(autoincrement())
  title         String
  description   String         @db.Text
  pricePerNight Int
  maxGuests     Int            @default(1)
  address       String
  city          String
  country       String
  hostId        Int
  host          User           @relation(fields: [hostId], references: [id])
  images        ListingImage[] // 1-N relationship with ListingImage

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Booking   Booking[]
  Wishlist  Wishlist[]
  Review    Review[]
  Report    Report[]
}

model ListingImage {
  id        Int    @id @default(autoincrement())
  listingId Int
  url       String
  name      String

  listing Listing @relation(fields: [listingId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Booking {
  id           Int           @id @default(autoincrement())
  guestId      Int
  listingId    Int
  checkInDate  DateTime
  checkOutDate DateTime
  totalPrice   Float
  status       BookingStatus @default(PENDING)
  guestNumber  Int

  guest   User     @relation(fields: [guestId], references: [id])
  listing Listing  @relation(fields: [listingId], references: [id])
  payment Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        Int    @id @default(autoincrement())
  rating    Int
  comment   String @db.Text
  guestId   Int
  listingId Int

  guest   User    @relation(fields: [guestId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([guestId, listingId])
}

enum ReportStatus {
  PENDING
  REVIEWED
  REJECTED
}

model Report {
  id         Int          @id @default(autoincrement())
  reporterId Int
  listingId  Int
  reason     String
  status     ReportStatus @default(PENDING)

  reporter User    @relation(fields: [reporterId], references: [id])
  listing  Listing @relation(fields: [listingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         Int    @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

  createdAt DateTime @default(now())
}

model Payment {
  id        Int       @id @default(autoincrement())
  bookingId Int       @unique
  amount    Float
  method    String
  status    String    @default("PENDING")
  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])
}
